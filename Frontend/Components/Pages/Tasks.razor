@page "/tasks"
@rendermode InteractiveServer
@using Frontend.Models
@using Frontend.Services
@using System.Text.Json
@inject TaskApiService TaskService
@inject TaskSignalRService SignalRService
@implements IAsyncDisposable

<h3 class="text-2xl font-bold mb-6 text-center text-gray-800">Tasks</h3>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
        <strong class="font-bold">Error:</strong>
        <span class="block sm:inline">@errorMessage</span>
        <button @onclick="ClearError" class="float-right font-bold text-red-700 hover:text-red-900">&times;</button>
    </div>
}

@if (tasks == null)
{
    <p class="text-gray-500 italic text-center">Loading...</p>
}
else
{
    <ul class="space-y-4 mb-8 overflow-x-auto">
        @foreach (var task in tasks)
        {
            <li class="flex flex-col md:flex-row items-center justify-between bg-gray-100 rounded-lg p-4 shadow-sm gap-2 min-w-0 overflow-x-auto">
                <div class="flex items-center gap-4 flex-1 min-w-0">
                    <input type="checkbox" class="h-5 w-5 text-blue-600 rounded border-gray-300 focus:ring-blue-500 shrink-0" @bind="task.IsCompleted" @bind:after="async () => await UpdateTask(task)" />
                    <div class="flex flex-col gap-1 w-full min-w-0">
                        <div class="font-semibold text-lg text-gray-800 @((task.IsCompleted ? "line-through text-gray-400" : "")) break-words truncate" title="@task.Title">@task.Title</div>
                        <div class="text-gray-600 break-words truncate" title="@task.Description">@task.Description</div>
                        <div class="flex items-center gap-2 mt-1">
                            <label class="text-sm text-gray-500">Due:</label>
                            <input type="date" class="px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400 text-sm" @bind="task.DueDate" @bind:after="async () => await UpdateTask(task)" />
                        </div>
                    </div>
                </div>
                <div class="flex flex-col gap-2 md:flex-row md:items-center md:gap-2 shrink-0">
                    <select class="px-2 py-1 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400 text-sm"
                            @bind="taskStatus[task.Id]"
                            @bind:after="async () => await CompleteTask(task, taskStatus[task.Id])">
                        <option value="Incomplete">Incomplete</option>
                        <option value="Completed">Completed</option>
                    </select>
                    <button @onclick="() => DeleteTask(task.Id)" class="ml-0 md:ml-4 px-3 py-1 bg-red-500 hover:bg-red-600 text-white rounded transition-colors">Delete</button>
                </div>
            </li>
        }
    </ul>
}

<div class="bg-gray-50 p-6 rounded-lg shadow-md">
    <h4 class="text-xl font-semibold mb-4 text-gray-700">Add New Task</h4>
    <div class="flex flex-col md:flex-row gap-3 mb-4">
        <input @bind="newTask.Title" placeholder="Title" class="flex-1 px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400" />
        <input @bind="newTask.Description" placeholder="Description" class="flex-1 px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400" />
        <input type="date" @bind="newTask.DueDate" class="flex-1 px-3 py-2 border border-gray-300 rounded focus:outline-none focus:ring-2 focus:ring-blue-400" />
        <button @onclick="AddTask" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors">Add</button>
    </div>
</div>

@code {
    private List<TaskModel>? tasks;
    private TaskModel newTask = new() { Title = string.Empty, Description = string.Empty, DueDate = DateTime.Today };
    private Dictionary<Guid, string> taskStatus = new();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
        await SetupSignalR();
    }

    private async Task SetupSignalR()
    {
        try
        {
            // Subscribe to SignalR events
            SignalRService.TaskCreated += OnTaskCreated;
            SignalRService.TaskUpdated += OnTaskUpdated;
            SignalRService.TaskCompleted += OnTaskCompleted;
            SignalRService.TaskDeleted += OnTaskDeleted;

            // Start the SignalR connection
            await SignalRService.StartAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to connect to real-time updates: {ex.Message}";
        }
    }

    private void OnTaskCreated(TaskModel task)
    {
        InvokeAsync(() =>
        {
            if (tasks != null)
            {
                tasks.Add(task);
                taskStatus[task.Id] = task.IsCompleted ? "Completed" : "Incomplete";
                StateHasChanged();
            }
        });
    }

    private void OnTaskUpdated(TaskModel updatedTask)
    {
        InvokeAsync(() =>
        {
            if (tasks != null)
            {
                var existingTaskIndex = tasks.FindIndex(t => t.Id == updatedTask.Id);
                if (existingTaskIndex >= 0)
                {
                    tasks[existingTaskIndex] = updatedTask;
                    taskStatus[updatedTask.Id] = updatedTask.IsCompleted ? "Completed" : "Incomplete";
                    StateHasChanged();
                }
            }
        });
    }

    private void OnTaskCompleted(TaskModel completedTask)
    {
        InvokeAsync(() =>
        {
            if (tasks != null)
            {
                var existingTaskIndex = tasks.FindIndex(t => t.Id == completedTask.Id);
                if (existingTaskIndex >= 0)
                {
                    tasks[existingTaskIndex] = completedTask;
                    taskStatus[completedTask.Id] = "Completed";
                    StateHasChanged();
                }
            }
        });
    }

    private void OnTaskDeleted(Guid taskId)
    {
        InvokeAsync(() =>
        {
            if (tasks != null)
            {
                var taskToRemove = tasks.FirstOrDefault(t => t.Id == taskId);
                if (taskToRemove != null)
                {
                    tasks.Remove(taskToRemove);
                    taskStatus.Remove(taskId);
                    StateHasChanged();
                }
            }
        });
    }

    private async Task LoadTasks()
    {
        try
        {
            tasks = await TaskService.GetTasksAsync();
            taskStatus = tasks?.ToDictionary(t => t.Id, t => t.IsCompleted ? "Completed" : "Incomplete") ?? new();
            ClearError();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load tasks: {FormatErrorMessage(ex.Message)}";
        }
    }

    private async Task AddTask()
    {
        if (!string.IsNullOrWhiteSpace(newTask.Title))
        {
            try
            {
                await TaskService.CreateTaskAsync(newTask);
                newTask = new() { Title = string.Empty, Description = string.Empty, DueDate = DateTime.Today };
                await LoadTasks();
                ClearError();
            }
            catch (Exception ex)
            {
                errorMessage = $"Failed to add task: {FormatErrorMessage(ex.Message)}";
            }
        }
    }

    private async Task UpdateTask(TaskModel task)
    {
        try
        {
            await TaskService.UpdateTaskAsync(task);
            await LoadTasks();
            ClearError();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to update task: {FormatErrorMessage(ex.Message)}";
        }
    }

    private async Task CompleteTask(TaskModel task, string? value)
    {
        try
        {
            if (value == "Completed" && !task.IsCompleted)
            {
                await TaskService.CompleteTaskAsync(task.Id);
            }
            else if (value == "Incomplete" && task.IsCompleted)
            {
                task.IsCompleted = false;
                await TaskService.UpdateTaskAsync(task);
            }
            await LoadTasks();
            ClearError();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to update task status: {FormatErrorMessage(ex.Message)}";
        }
    }

    private async Task DeleteTask(Guid id)
    {
        try
        {
            await TaskService.DeleteTaskAsync(id);
            await LoadTasks();
            ClearError();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to delete task: {FormatErrorMessage(ex.Message)}";
        }
    }

    private void ClearError()
    {
        errorMessage = null;
    }

    private string FormatErrorMessage(string rawErrorMessage)
    {
        try
        {
            // Try to parse the JSON error response
            var jsonStart = rawErrorMessage.IndexOf('{');
            if (jsonStart >= 0)
            {
                var jsonPart = rawErrorMessage.Substring(jsonStart);
                var errorResponse = JsonSerializer.Deserialize<JsonElement>(jsonPart);
                
                // Check if it's a validation error response
                if (errorResponse.TryGetProperty("errors", out var errors))
                {
                    var validationMessages = new List<string>();
                    
                    foreach (var error in errors.EnumerateObject())
                    {
                        var fieldName = error.Name;
                        if (error.Value.ValueKind == JsonValueKind.Array)
                        {
                            foreach (var message in error.Value.EnumerateArray())
                            {
                                validationMessages.Add(message.GetString() ?? "");
                            }
                        }
                    }
                    
                    if (validationMessages.Any())
                    {
                        return string.Join(" ", validationMessages);
                    }
                }
                
                // Check for a general title or message
                if (errorResponse.TryGetProperty("title", out var title))
                {
                    return title.GetString() ?? rawErrorMessage;
                }
            }
        }
        catch
        {
            // If JSON parsing fails, return the original message
        }
        
        return rawErrorMessage;
    }

    public async ValueTask DisposeAsync()
    {
        // Unsubscribe from SignalR events
        SignalRService.TaskCreated -= OnTaskCreated;
        SignalRService.TaskUpdated -= OnTaskUpdated;
        SignalRService.TaskCompleted -= OnTaskCompleted;
        SignalRService.TaskDeleted -= OnTaskDeleted;

        // Stop the SignalR connection
        await SignalRService.StopAsync();
    }
}
